


基础版配置操作 # 不够灵活
nginx1 -> A业务服务
nginx2 -> B业务服务
nginx3 -> C业务服务

高效配置方案：
虚拟主机配置：
定义：在同一个nginx上运行多套单独服务，这些服务时相互独立的。

在一个nginx下
虚拟主机A -> A业务服务
虚拟主机B -> B业务服务
虚拟主机C -> C业务服务

虚拟主机配置方式：
方式一：基于主机多ip的方式
一个nginx主机
http://192.168.1.1   -> ip:192.168.1.1  -> 虚拟主机A
http://192.168.1.2   -> ip:192.168.1.2  -> 虚拟主机B
http://192.168.1.3   -> ip:192.168.1.3  -> 虚拟主机C

方式二：基于端口的配置方式
一个nginx主机
http://192.168.1.1:80   -> listen:80  -> 虚拟主机A
http://192.168.1.1:81   -> listen:81  -> 虚拟主机B
http://192.168.1.1:82   -> listen:82  -> 虚拟主机C

方式三：基于多个host名称方式（多域名方式）
一个nginx主机  只需要配置同一个 IP: 192.168.1.1 port:80
http://1.imooc.com   -> 1.imooc.com  -> 虚拟主机A
http://2.imooc.com   -> 2.imooc.com  -> 虚拟主机B
http://3.imooc.com   -> 3.imooc.com  -> 虚拟主机C


具体实现
基于主机对IP的方式

方式一、多网卡多ip的方式 # 要求高
网卡1  <----> ip1 (192.168.1.1)
网卡2  <----> ip2 (192.168.1.2)
 
方式二、单网卡多ip的方式 # 测试演示 # 阿里云服务器不支持
网卡1  <----> ip1 (192.168.1.1)
网卡1  <----> ip2 (192.168.1.2)


### 执行单网卡多ip的方式演示

查看本地网卡情况
ip a
返回结果如下：
# 标记为1 的是本地回环网卡，不是实际的网卡
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo 
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
# eth0 代表实际网卡 -> 172.20.218.60/20(虚拟主机的ip地址/掩码)
2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000
    link/ether 00:16:3e:0d:26:da brd ff:ff:ff:ff:ff:ff
    inet 172.20.218.60/20 brd 172.20.223.255 scope global dynamic noprefixroute eth0
       valid_lft 313452384sec preferred_lft 313452384sec
    inet6 fe80::216:3eff:fe0d:26da/64 scope link
       valid_lft forever preferred_lft forever

可以自行添加多个网卡，操作前需要ping一下，确保新增的网卡没有被使用

ping 172.20.218.61
返回结果： 
PING 172.20.218.61 (172.20.218.146) 56(84) bytes of data. # 后续没有内容，则认为没有被使用

添加网卡操作
ip a add 172.20.218.61/20 dev eth0 # 注意只能修改ip的最后一位，/20保持一致
再查看当前网卡状态
ip a
返回结果如下：
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000
    link/ether 00:16:3e:0d:26:da brd ff:ff:ff:ff:ff:ff
    inet 172.20.218.60/20 brd 172.20.223.255 scope global dynamic noprefixroute eth0
       valid_lft 313451801sec preferred_lft 313451801sec
    inet 172.20.218.61/20 scope global secondary eth0 # 新增出来的网卡
       valid_lft forever preferred_lft forever
    inet6 fe80::216:3eff:fe0d:26da/64 scope link
       valid_lft forever preferred_lft forever

添加成功之后，再ping一下新增的网卡
ping 172.20.218.61 # 可联通，即新增成功


接下来，可以进行对nginx配置进行修改，以进行当前业务操作。
cd /etc/nginx
vi nginx.conf
由于 include 这一行的存在，nginx存在子文件，我们的操作就到了 
/etc/nginx/conf.d/default.conf
为了保证安全操作，需要先将原来的默认配置文件做备份
cd  /etc/nginx/conf.d
cp default.conf  /opt/backup/default.conf_bak  # 复制默认配置文件到 /opt/backup/default.conf_bak

保持目录 /etc/nginx/conf.d 下，
修改默认配置文件名 mv default.conf  vserver1.conf
基于vserver1.conf 再复制另外一个配置文件vserver2.conf：  操作： cp vserver1.conf vserver2.conf

修改内容 
vserver1.conf中
listen      172.20.218.60:80;
location / {
  root /opt/app/code; # 变更访问文件目录
  index index.html index.htm;
}
vserver2.conf中
listen      172.20.218.61:80;
location / {
  root /opt/app/code1; # 变更访问文件目录
  index index.html index.htm;
}

确保文件存在，进入/opt/app/code 文件夹下查看一下情况，是否存在index.html文件？？

先关闭原来的配置文件
nginx -s stop -c /etc/nginx/nginx.conf # 关闭
nginx -c /etc/nginx/nginx.conf # 关闭

测试访问地址 
curl http://172.20.218.60:80/index.html
curl http://172.20.218.61:80/index.html
测试成功！！！

问题：2.14 怎么就不能访问呢？？？ 
解答：阿里云服务器，需要配置安全组，确保对应端口对外开放。


阿里云安全组已经开放3001-3006段的端口
查看：https://ecs.console.aliyun.com/#/securityGroupDetail/region/cn-hangzhou/groupId/sg-bp1ca5vr2fxhkurf1ovz/detail/intranetIngress
实践操作：基于端口的配置方式
一个nginx主机(理论)
http://192.168.1.1:80   -> listen:80  -> 虚拟主机A
http://192.168.1.1:81   -> listen:81  -> 虚拟主机B
http://192.168.1.1:82   -> listen:82  -> 虚拟主机C

注意检查端口是否被占用的情况
ss -luntp  # Local Address:Port 这一栏列出了所有使用中的端口 # Process一栏，可以查看是谁在使用者端口
或者 netstat -luntp # Local Addres

准备工作
目录 /opt/app/code 新增三个子目录 code  code1 

cd /etc/nginx
cd conf.d/  有两个配置文件 vserver1.conf  vserver2.conf

vim vserver1.conf 修改内容
-> listen      3001;
vim vserver2.conf 修改内容
-> listen      3003;

1 修改了nginx配置文件需要检查配置是否正确，
nginx -tc /etc/nginx/nginx.conf
-> nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
-> nginx: configuration file /etc/nginx/nginx.conf test is successful
2 关闭原来的配置
nginx -s stop -c /etc/nginx/nginx.conf
3 重启nginx配置
nginx -c /etc/nginx/nginx.conf

确认防火墙关闭 iptables -L 
测试效果
-> http://47.98.181.79:3001/index.html 返回正确结果
-> http://47.98.181.79:3003/index.html 返回正确结果


配置vue3项目 
目录所在 /opt/vue3-mogu-css/dist
测试地址 -> http://47.98.181.79:3005/#/mall/home 返回正确结果
成功！！！

实践操作 方式三：基于多个host名称方式（多域名方式）【对应相应头里面的host字段】
一个nginx主机  只需要配置同一个 IP: 192.168.1.1 port:80
http://1.imooc.com   -> 1.imooc.com  -> 虚拟主机A
http://2.imooc.com   -> 2.imooc.com  -> 虚拟主机B
http://3.imooc.com   -> 3.imooc.com  -> 虚拟主机C

test.wenlong.live
resume.wenlong.live
my-num.wenlong.live

第一种方式，通过修改本机的host信息增加域名
vim /etc/hosts

172.20.218.61  1.imoocc.com
172.20.218.61  2.imoocc.com
然后验证是否可联通
ping 1.imoocc.com 已联通
ping 2.imoocc.com

前置准备完成，现在修改nginx配置
cd /etc/nginx
cd conf.d

vim vserver1.conf
    -> listen      80;
    -> server_name  1.imoocc.com;
    或者
    -> server_name  test.wenlong.live;
vim vserver2.conf
    -> listen      80;
    -> server_name  2.imoocc.com;

检查配置语法是否正确
1 修改了nginx配置文件需要检查配置是否正确，
nginx -tc /etc/nginx/nginx.conf
-> nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
-> nginx: configuration file /etc/nginx/nginx.conf test is successful
2 关闭原来的配置
nginx -s stop -c /etc/nginx/nginx.conf
3 重启nginx配置
nginx -c /etc/nginx/nginx.conf

测试访问地址
-> curl http://1.imoocc.com 成功返回
-> curl http://2.imoocc.com 成功返回
-> curl http://test.wenlong.live 成功返回
