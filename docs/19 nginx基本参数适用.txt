基本参数适用

1 安装目录
2 编译参数
3 nginx基本配置语法


具体如下：
1 安装目录
rpm -ql nginx 
返回结果如下：
/etc/logrotate.d/nginx 类型：配置文件  作用：nginx日志轮转，用于logrotate服务的日志切割


类型：目录，配置文件。  作用：nginx主配置文件
/etc/nginx # 核心讲解
/etc/nginx/nginx.conf 启动时的主要配置
/etc/nginx/conf.d
/etc/nginx/conf.d/default.conf 变更之后默认加载的server配置文件

类型：配置文件。  作用：cgi配置相关，fastcgi配置
/etc/nginx/fastcgi_params
/etc/nginx/scgi_params
/etc/nginx/uwsgi_params

类型：配置文件。  作用：编码转换映射转化文件。  此版本没有这三个文件，很少用到
/etc/nginx/koi-utf
/etc/nginx/koi-win
/etc/nginx/win-utf

类型：配置文件。  作用：设置http协议的Content-Type与扩展名对应关系。
应用场景：如果出现不能识别文件类型的时候，需要在此处做扩展
/etc/nginx/mime.types




类型：配置文件。  作用：用于配置出系统守护进程管理器管理方式。
应用场景：守护进程启动期管理
/usr/lib/systemd/system/nginx-debug.service
/usr/lib/systemd/system/nginx.service
/etc/sysconfig/nginx 此版本无
/etc/sysconfig/nginx-debug 此版本无

类型：目录。  作用：nginx模块目录。
/etc/nginx/modules
/usr/lib64/nginx
/usr/lib64/nginx/modules


类型：命令。  作用：nginx服务的启动管理的终端命令
/usr/sbin/nginx # 一般适用这个命令启动、关闭、配置等
/usr/sbin/nginx-debug # 相对应启用dubugger命令：调试、更新使用

类型：文件目录。  作用：nginx的手册和帮助文件
如：man命令出来的内容，都是放在这里了
/usr/share/doc/nginx-1.20.2
/usr/share/doc/nginx-1.20.2/COPYRIGHT
/usr/share/man/man8/nginx.8.gz

类型：目录。  作用：nginx的缓存目录
/var/cache/nginx # 重点讲解

类型：目录。  作用：nginx的日志目录
/var/log/nginx


以下文件没有一一讲解，自行了解吧
/usr/share/nginx 
/usr/share/nginx/html
/usr/share/nginx/html/50x.html
/usr/share/nginx/html/index.html
/usr/libexec/initscripts/legacy-actions/nginx
/usr/libexec/initscripts/legacy-actions/nginx/check-reload
/usr/libexec/initscripts/legacy-actions/nginx/upgrade


2 编译参数
命令 nginx -V # 返回结果的参数是可以放在 ./configure 后面使用的
configure arguments: 

作用：安装目的目录或路径
--prefix=/etc/nginx 
--sbin-path=/usr/sbin/nginx 
--modules-path=/usr/lib64/nginx/modules 
--conf-path=/etc/nginx/nginx.conf  # 配置文件
--error-log-path=/var/log/nginx/error.log  # 错误日志
--http-log-path=/var/log/nginx/access.log  # 访问日志
--pid-path=/var/run/nginx.pid  # 启动的pid
--lock-path=/var/run/nginx.lock  # 锁

作用：执行对应模块时，nginx所保留的临时性文件
--http-client-body-temp-path=/var/cache/nginx/client_temp 
--http-proxy-temp-path=/var/cache/nginx/proxy_temp 
--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp 
--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp 
--http-scgi-temp-path=/var/cache/nginx/scgi_temp 

作用：设定nginx进程启动的用户和组用户【出于安全性考虑】
--user=nginx  # 对应work是哪个，可以自定义
--group=nginx 

作用：设置额外的参数将被添加到CFLAGS变量，使用不多，了解即可
--with-cc-opt='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong 

作用：设置附加的参数，链接系统库
--with-ld-opt=parameters # 没有这个选项，有其他方式也可以做到，了解即可



--with-compat 
--with-file-aio 
--with-threads 
--with-http_addition_module 
--with-http_auth_request_module 
--with-http_dav_module 
--with-http_flv_module 
--with-http_gunzip_module 
--with-http_gzip_static_module 
--with-http_mp4_module 
--with-http_random_index_module 
--with-http_realip_module 
--with-http_secure_link_module 
--with-http_slice_module 
--with-http_ssl_module 
--with-http_stub_status_module 
--with-http_sub_module 
--with-http_v2_module 
--with-mail --with-mail_ssl_module 
--with-stream 
--with-stream_realip_module 
--with-stream_ssl_module 
--with-stream_ssl_preread_module 
--param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fPIC' --with-ld-opt='-Wl,-z,relro -Wl,-z,now -pie'


3 nginx基本配置语法
cd /etc/nginx # 核心讲解
vi nginx.conf
返回结果如下：
http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  /var/log/nginx/access.log  main;

  sendfile        on;
  #tcp_nopush     on;

  keepalive_timeout  65;

  #gzip  on;

  include /etc/nginx/conf.d/*.conf; # 会继续读取这里面的配置文件，因此，这里才是真正使用的nginx配置文件
  # 实际对应的文件为： /etc/nginx/conf.d/default.conf
}


cat vi /etc/nginx/nginx.conf # 共有三大块内容
返回结果如下：# 此处用来添加备注
# 第一大块内容
user  nginx; # 设置nginx服务的系统使用用户
worker_processes  auto; # 工作进程数 （多进程，并发处理，一般与cpu个数相等）

error_log  /var/log/nginx/error.log notice; # nginx的错误日志
pid        /var/run/nginx.pid; # nginx服务启动时候pid

# 第二大块内容: 事件模块
events {
    worker_connections  1024; # 每个进程允许最大连接数，最大为65535，一般调节到10000即可满足企业大部分需求
    use  # 工作进程数，可以自己设置内核模型
}

# 第三大块内容：协议层http具体配置
http { # 一个http服务，可以包含多个server服务
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65; # 客户端与服务端超时时间，默认单位为毫秒
    # 第一个server服务，代表一个独立的站点
    server { # 一个server 可以包含多个 location
      listen       80;
      server_name  localhost;
      
      # 控制每一层路径的访问（路径具体为：浏览器中url的路径）
      location / {
        root   /usr/share/nginx/html;
        index  index.html  index.htm;
      }

      error_page 500 502 503 504 /50x.html; # 自定义错误页面，可以向下匹配location对应的路径
      location = /50x.html {
        root   /usr/share/nginx/html;
      }
    }

    # 第二个server服务，代表另一个独立的站点
    server {

    }

    #gzip  on;

    include /etc/nginx/conf.d/*.conf; # 子配置文件
}


vi /etc/nginx/conf.d/default.conf
返回结果如下：
server {
  listen       80;
  server_name  localhost; # 也可以写域名

  #access_log  /var/log/nginx/host.access.log  main;

  location / {
      root   /usr/share/nginx/html; # 访问 / 时，对应文件存放路径 
      # 经查看 路径/usr/share/nginx/html内 有两个磨人文件： 50x.html  index.html
      index  index.html index.htm; # 访问 / 时，对应root路径下的哪个文件
  }

  #error_page  404              /404.html;

  # redirect server error pages to the static page /50x.html
  #
  error_page   500 502 503 504  /50x.html;
  location = /50x.html {
      root   /usr/share/nginx/html;
  }

  # proxy the PHP scripts to Apache listening on 127.0.0.1:80
  #
  #location ~ \.php$ {
  #    proxy_pass   http://127.0.0.1;
  #}

  # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
  #
  #location ~ \.php$ {
  #    root           html;
  #    fastcgi_pass   127.0.0.1:9000;
  #    fastcgi_index  index.php;
  #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
  #    include        fastcgi_params;
  #}

  # deny access to .htaccess files, if Apache's document root
  # concurs with nginx's one
  #
  #location ~ /\.ht {
  #    deny  all;
  #}
}


测试访问操作
ip a
eht0 172.20.218.60
linux 47.98.181.79

重启nginx服务
systemctl restart nginx.service
systemctl reload nginx.service

参考： https://www.kancloud.cn/lengyueguang/linux/567164
1.[root@localhost ~]# ps -ef |grep nginx
看是否存在主进程和php-fpm子进程
nginx: master process
00:00:00 php-fpm:xxx
2.查看nginx监听的端口是否存在
[root@localhost ~]# netstat -tlnup|grep nginx
tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 12891/nginx
3.如果nginx已经做成服务
[root@localhost ~]# service nginx status
nginx (pid 12891) 正在运行...